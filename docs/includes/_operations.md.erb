# Managing your cluster

## Initial Provisioning

When using a template you will be left with a similar structure: An `ansible`
folder with `group_vars` and `playbook.yml`, and a `run.sh` file.

### ansible folder

The `playbook.yml` file is the file you will use to provision the cluster, it is
also the file that you should modify if you want to add extra features to your
servers, such as disk formatting, iptables, etc...

Meanwhile the `group_vars` folder by default contains only one file named `all`
that contains the most basic variables for your cluster such as domains and
passwords. Make sure that the domain variables are always in this file since the
<%= build_config['github']['name'] %> binary will parse it to automatically
configure your shell.

### run.sh

`run.sh` is your shared `.bash_profile`, it is where you will want to initialize
common variables and functions that should be shared with every other developers
using the command-line.

## Certificates

On provisioning by default self-signed certificates will be created for every
critical parts of the infrastructure. To make the user life easier it can be
useful to have chrome trust the https CA generated to prevent errors when trying
to access the various http interfaces available.

To access your https CA (or any CA generated) you can point your browser to
`http://vault.<local_domain_name>/v1/<backend>/ca/pem` where `local_domain_name`
is your configured domain name in your inventory and `backend` is any of the
configured CA backend for <%= build_config['github']['name'] %>, for example
`https/pki` for the https backend.

   backend   | description
-------------|------------------------------------------------------------
`consul/pki` | Used to generate server and client certificates for consul
`docker/pki` | Same as consul, used to generate both client and server certs
`https/pki`  | Used only to generate server https certificates
`ldap/pki`   | Used to generate STARTTLS certs for openldap
`vault/pki`  | Used for both client and servers certs for vault

### Generating client certificates for consul/docker

```shell
$ vault write <backend>/issue/client common_name=backend.client.<local_domain_name>
Key             	Value
---             	-----
certificate     	-----BEGIN CERTIFICATE-----
... cert data ...
-----END CERTIFICATE-----
issuing_ca      	-----BEGIN CERTIFICATE-----
... cert data ...
-----END CERTIFICATE-----
private_key     	-----BEGIN RSA PRIVATE KEY-----
... cert data ...
-----END RSA PRIVATE KEY-----
private_key_type	rsa
serial_number   	... serial number ...

```

Should you need to generate client certificates for another develop or yourself
you will need to get a valid token for vault (if you configured your container
properly it should already be set), you can then use the write command of vault
to generate a certificate on the proper backend like this:

The `common_name` is required and can be anything as long as it ends with the
`local_domain_name`.

## LDAP

Once <%= build_config['github']['name'] %> is provisioned and running, by default
a LDAP server will be provisioned and running on the control nodes as well as a
management interface accessible through traefik at `https://ldap-admin.<local_domain_name>/`.

The default credentials are `cn=admin,<dc_derived_from_local_domain_name>` with
the password that should have been generated in your `group_vars/all` file.

Creating users in this interface will allow them to access the different services
available on the cluster such as `grafana`.

## Vault

Vault is one of the most important part of your cluster; It is in charge of
providing your servers and clients with valid TLS certificates and losing
credentials with vault will prevent you from connecting to any of the primary
component unless you SSH on the box (since most of them are configured to allow
non-TLS connections from localhost).

### Credentials

Currently 2 types of credentials are generated during the initial setup phase:

  * __root__: Root credentials are saved into `~/.vault.root.conf` and contains
    the unseal keys and root token for vault, this is a crucial file that you
    will need everytime you restart the servers (to unseal) or if you need to
    do root operation. Make sure to save it somewhere safe!
  * __ansible__: This is an admin AppRole access and is saved into `~/.vault.ansible.conf`,
    it is used when generating certificates during the provisioning process and
    also needs to be shared safely between the administrators so that they can
    operate the cluster. Should they be lost they can easily be regenerated by
    using the root token.

Finally the `<%= build_config['binary']['name'] %>` binary will support a 3rd
way to authenticate and this is the one that developers will probably use to
generate their credentials, when the container starts it will look for a
`~/vault.conf` file that is a JSON file with 2 keys in it:

__key__   | __desc__
----------|----------
`backend` | that should be the name of the auth backend to use
`data`    | that should be the data to be sent during the auth process

This allows administrators to use any of the auth backend they might want to
auth user, such as GitHub auth or LDAP auth, please refer to the vault documentation
for the list of available backend and how to configure/use them.

### Unseal Process

The unseal process is necessary when for example your restart the vault daemon,
it can be done both remotely and localy (on the node itself), make sure that your
`VAULT_ADDR` environment variable is set properly and run `vault unseal`, it will
ask for a key, check your `root` credentials described above and take one of the
keys and input/paste it in the vault prompt, run the command again 2 more times
with different keys to finish the unseal process.

### Backup

Currently vault stores data inside consul and this makes the backup process quite
simple, first connect to any of the control nodes, then just run:

```sh
$ consul kv export vault | xz > my-vault-backup.json.xz
```

You can then export/save this file onto S3 or any other safe storage backend you
want to use.

### Restore

First make sure that vault is stopped, then run:

```sh
$ xzcat my-vault-backup.json.xz | consul kv import -
```

Once import is done, start vault and unseal as normal.

### Rotating certificates

The playbooks support rotating certificates by setting some variables to true:

* __cert&#95;rotate&#95;&lt;service&gt;&#95;server__: Rotate the service's server certificates
* __cert&#95;rotate&#95;&lt;service&gt;&#95;client__: Rotate the service's client certificates
* __cert&#95;rotate&#95;&lt;service&gt;__: Rotate the service's both server and client certificates
* __cert&#95;rotate&#95;all__: Rotate all the certificates for all services

You might need to manually restart some of the daemons and containers that are
using the certificates once the new certificates are generated.
