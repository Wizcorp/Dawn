version: "3"
networks:
  net:
    driver: overlay
  traefik:
    external:
      name: traefik_net

volumes:
  prometheus:
  endpoints:

services:
  server:
    image: {{ prometheus_image }}:{{ prometheus_version }}
    networks:
      - net
      - traefik
    volumes:
      # Configuration
      - "/etc/prometheus.yml:/etc/prometheus/prometheus.yml"
      - "{{ consul_client_ca_file }}:/etc/ssl/certs/consul/ca.pem:ro"
      - "{{ consul_client_cert_file }}:/etc/ssl/certs/consul/cert.pem:ro"
      - "{{ consul_client_key_file }}:/etc/ssl/certs/consul/key.pem:ro"
      # Docker Swarm
      - /var/run/docker.sock:/var/run/docker.sock
      # Data Volumes
      - "prometheus:/prometheus"
      - "endpoints:/etc/endpoints"
      # Extra CAs from our architecture
      - "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:/etc/ssl/certs/ca-certificates.crt:ro"
    deploy:
      mode: global
      placement:
        constraints: {{ prometheus_stack_constraints|to_yaml }}
      labels:
        traefik.port: 9090
        traefik.frontend.rule: "Host:prometheus.{{ local_domain_name }}"
        traefik.backend.loadbalancer.stickiness: "true"
        traefik.docker.network: traefik_net

  swarm-discover:
    image: stelcheck/prometheus-swarm:1.3.0
    command: "-i 10 -o /endpoints/swarm.json -p prometheus_server"
    networks:
      - net
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - endpoints:/endpoints
    deploy:
      mode: global
      placement:
        constraints: {{ prometheus_stack_constraints|to_yaml }}
