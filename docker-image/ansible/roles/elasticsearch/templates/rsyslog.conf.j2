input {
	udp {
		id => "input_syslog_main"
		port => 1514
		codec => "json"
		type => "rsyslog"
	}
}

filter {
	if [type] == "rsyslog" {
		mutate {
			rename => { "_PID" => "pid" }
			rename => { "MESSAGE" => "message" }
			rename => { "PRIORITY" => "priority" }
			rename => { "SYSLOG_IDENTIFIER" => "program" }
			replace => { "host" => "%{_HOSTNAME}" }
		}

		if [CONTAINER_NAME] != "" {
			# container events
			mutate {
				rename => { "_PID" => "pid" }
				rename => { "MESSAGE" => "message" }
				rename => { "PRIORITY" => "priority" }
				rename => { "CONTAINER_TAG" => "container_tag" }
				rename => { "CONTAINER_ID_FULL" => "container_id_full" }
				rename => { "CONTAINER_NAME" => "container_name" }
				rename => { "CONTAINER_ID" => "container_id" }
				replace => { "host" => "%{_HOSTNAME}" }
				replace => { "program" => "%{container_name}" }
			}

			ruby {
				code => "
					if event.get('container_name').include? '_'
						_stack_els = event.get('container_name')[/^([a-z0-9_-]+)/i, 0].split('_', 2)
						event.set('docker_stack', _stack_els[0])
						event.set('docker_service', _stack_els[1])
					end
				"
			}
		}
	}
}

output {
	if [type] == "rsyslog" {
		elasticsearch {
			id => "output_elasticsearch_main"
			hosts => [ "elasticsearch:9200" ]
			template => "/etc/logstash/elasticsearch-template.json"
			template_overwrite => true
		}
	}
}
