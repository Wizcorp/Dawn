- name: "Create grafana main config file"
  template:
    src: "{{ grafana_config_template }}"
    dest: /etc/grafana.ini
    mode: 0644
  register: grafana_config_file_status

- name: "Create grafana ldap config file"
  template:
    src: "{{ grafana_ldap_template }}"
    dest: /etc/grafana-ldap.toml
    mode: 0644
  register: grafana_ldap_file_status

- name: "Create grafana stack file"
  template:
    dest: "{{ grafana_stack_file }}"
    src: "grafana_stack.yml.j2"
  register: grafana_stack_file_status

- name: "Check if grafana is running"
  shell: "docker stack ps {{ grafana_stack }}"
  changed_when: grafana_running_state.rc != 0
  ignore_errors: yes
  register: grafana_running_state

- name: "Start grafana on the cluster"
  when: >
    grafana_running_state.changed|bool
    or grafana_config_file_status.changed|bool
    or grafana_ldap_file_status.changed|bool
    or grafana_stack_file_status.changed|bool
  shell: "docker stack deploy -c '{{ grafana_stack_file }}' {{ grafana_stack }}"

- name: "Build internal grafana URL"
  set_fact:
    grafana_url: "https://{{ group_ipv4.edge[0] }}"
    grafana_host: "grafana.{{ local_domain_name }}"

- name: "Check if prometheus source exists"
  uri:
    url: "{{ grafana_url }}/api/datasources"
    return_content: yes
    user: "{{ grafana_user }}"
    password: "{{ grafana_password }}"
    force_basic_auth: yes
    validate_certs: no
    headers:
      Host: "{{ grafana_host }}"
  retries: 6
  delay: 10
  register: grafana_datasources
  until: grafana_datasources.json is defined

- name: "Setup prometheus source on grafana"
  when: "'prometheus' not in grafana_datasources.json|map(attribute='name')"
  uri:
    url: "{{ grafana_url }}/api/datasources"
    method: POST
    user: "{{ grafana_user }}"
    password: "{{ grafana_password }}"
    body:
      name: prometheus
      type: prometheus
      url: http://prometheus_server:9090
      access: proxy
      basicAuth: false
    force_basic_auth: yes
    status_code: 200
    body_format: json
    validate_certs: no
    headers:
      Host: "{{ grafana_host }}"

- name: "Setup elasticsearch source on grafana"
  when: "'elasticsearch' not in grafana_datasources.json|map(attribute='name')"
  uri:
    url: "{{ grafana_url }}/api/datasources"
    method: POST
    user: "{{ grafana_user }}"
    password: "{{ grafana_password }}"
    body:
      name: "elasticsearch"
      type: "elasticsearch"
      url: "http://{{ group_ipv4.control[0] }}:9200"
      access: "proxy"
      basicAuth: false
      database: "[elasticsearch_metrics-]YYYY.MM.DD"
      jsonData:
        esVersion: 56
        interval: "Daily"
        keepCookies: []
        maxConcurrentShardRequests: 256
        timeField: "@timestamp"
    force_basic_auth: yes
    status_code: 200
    body_format: json
    validate_certs: no
    headers:
      Host: "{{ grafana_host }}"

- name: "Setup a cron to clean up ES metrics periodically"
  when: groups['control'][0] == inventory_hostname
  cron:
    name: "purge ES metrics"
    special_time: "daily"
    job: /usr/local/bin/es_purge "elasticsearch_metrics-" {{ log_retention }}


- name: "Check if the hardware dashboard exists"
  uri:
    url: "{{ grafana_url }}/api/search?query=Hardware"
    return_content: yes
    user: "{{ grafana_user }}"
    password: "{{ grafana_password }}"
    force_basic_auth: yes
    validate_certs: no
    headers:
      Host: "{{ grafana_host }}"
  register: grafana_hardware_dashboards

- name: "Register hardware dashboard"
  when: grafana_hardware_dashboards.json|length == 0
  uri:
    url: "{{ grafana_url }}/api/dashboards/db"
    method: POST
    user: "{{ grafana_user }}"
    password: "{{ grafana_password }}"
    body: "{\"dashboard\":{{ lookup('file','dashboard.json') }},\"overwrite\":false}"
    force_basic_auth: yes
    status_code: 200
    body_format: json
    validate_certs: no
    headers:
      Host: "{{ grafana_host }}"

- name: "Check if the elasticsearch dashboard exists"
  uri:
    url: "{{ grafana_url }}/api/search?query=Elasticsearch"
    return_content: yes
    user: "{{ grafana_user }}"
    password: "{{ grafana_password }}"
    force_basic_auth: yes
    validate_certs: no
    headers:
      Host: "{{ grafana_host }}"
  register: grafana_elasticsearch_dashboards

- name: "Register elasticsearch dashboard"
  when: grafana_elasticsearch_dashboards.json|length == 0
  uri:
    url: "{{ grafana_url }}/api/dashboards/db"
    method: POST
    user: "{{ grafana_user }}"
    password: "{{ grafana_password }}"
    body: "{\"dashboard\":{{ lookup('file','elasticsearch.json') }},\"overwrite\":false}"
    force_basic_auth: yes
    status_code: 200
    body_format: json
    validate_certs: no
    headers:
      Host: "{{ grafana_host }}"
