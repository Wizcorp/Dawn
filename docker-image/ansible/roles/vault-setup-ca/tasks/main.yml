- block:
  # Create the intermediate PKI backend
  - name: "Check {{ backend_name }} PKI backend status"
    hashivault_secret_list:
      token: "{{ vault_token }}"
    register: vault_mount_list
    changed_when: false

  - name: "Enable the {{ backend_name }} PKI backend"
    when: vault_mount_list.backends[backend_name + '/pki/'] is not defined
    hashivault_secret_enable:
      token: "{{ vault_token }}"
      name: "{{ backend_name }}/pki"
      backend: pki

  # We need to do the tuning manually since the lib doesn't provide the method for it
  - name: "Tune {{ backend_name }} CA TTL"
    uri:
      url: "{{ vault_addr }}/v1/sys/mounts/{{ backend_name }}/pki/tune"
      method: POST
      headers:
        X-Vault-Token: "{{ vault_token }}"
      body_format: json
      body: "{\"max_lease_ttl\":\"{{ vault_intermediate_ca_ttl }}\"}"
      status_code: 204

  # Generate an intermediate CA
  - name: "Check for {{ backend_name }} CA"
    hashivault_read:
      token: "{{ vault_token }}"
      secret: "/{{ backend_name }}/pki/config/urls"
      key: issuing_certificates
    ignore_errors: true
    changed_when: false
    register: vault_intermediate_cert_status

  - name: "Create {{ backend_name }} intermediate CA"
    when: >
      cert_rotate_cas|default(false)|bool
      or vault_intermediate_cert_status and vault_intermediate_cert_status.failed|default(false)|bool
    hashivault_write:
      token: "{{ vault_token }}"
      secret: "/{{ backend_name }}/pki/intermediate/generate/internal"
      data:
        common_name: "{{ local_domain_name }}"
        ttl: "{{ vault_intermediate_ca_ttl }}"
    register: vault_intermediate_ca

  - name: "Sign the intermediate CA using our root CA"
    when: >
      vault_intermediate_ca.data is defined
      and vault_intermediate_ca.data.data is defined
      and vault_intermediate_ca.data.data.csr is defined
    hashivault_write:
      token: "{{ vault_token }}"
      secret: /pki/root/sign-intermediate
      data:
        csr: "{{ vault_intermediate_ca.data.data.csr }}"
        common_name: "{{ local_domain_name }}"
        ttl: "{{ vault_intermediate_ca_ttl }}"
    register: vault_intermediate_ca_signed

  - name: "Import signed intermediate CA"
    when: >
      vault_intermediate_ca_signed.data is defined
      and vault_intermediate_ca_signed.data.data is defined
      and vault_intermediate_ca_signed.data.data.certificate is defined
    hashivault_write:
      token: "{{ vault_token }}"
      secret: "/{{ backend_name }}/pki/intermediate/set-signed"
      data:
        certificate: "{{ vault_intermediate_ca_signed.data.data.certificate }}"

  - name: "Set {{ backend_name }} CA urls"
    when: >
      vault_intermediate_cert_status
      and vault_intermediate_cert_status.failed|default(false)|bool
    hashivault_write:
      token: "{{ vault_token }}"
      secret: "/{{ backend_name }}/pki/config/urls"
      data:
        issuing_certificates: "http://vault.{{ local_domain_name }}/v1/{{ backend_name }}/pki/ca"
        crl_distribution_points: "http://vault.{{ local_domain_name }}/v1/{{ backend_name }}/pki/crl"

  # Create a default server/client roles
  - name: "Check for {{ backend_name }} server role"
    hashivault_read:
      token: "{{ vault_token }}"
      secret: "/{{ backend_name }}/pki/roles/server"
      key: allowed_domains
    ignore_errors: true
    changed_when: false
    register: vault_server_role_status

  - name: "Create {{ backend_name }} server role"
    when: >
      vault_server_role_status
      and vault_server_role_status.failed|default(false)|bool
    hashivault_write:
      token: "{{ vault_token }}"
      secret: "/{{ backend_name }}/pki/roles/server"
      data:
        allowed_domains: "{{ local_domain_name }}"
        allow_subdomains: true
        max_ttl: "{{ server_ttl }}"

  - name: "Check for {{ backend_name }} client role"
    when: client_ttl is defined
    hashivault_read:
      token: "{{ vault_token }}"
      secret: "/{{ backend_name }}/pki/roles/client"
      key: allowed_domains
    ignore_errors: true
    changed_when: false
    register: vault_client_role_status

  - name: "Create {{ backend_name }} client role"
    when: >
      vault_client_role_status
      and vault_client_role_status.failed|default(false)|bool
    hashivault_write:
      token: "{{ vault_token }}"
      secret: "/{{ backend_name }}/pki/roles/client"
      data:
        allowed_domains: "{{ local_domain_name }}"
        allow_subdomains: true
        max_ttl: "{{ client_ttl }}"

  environment:
    VAULT_ADDR: "{{ vault_addr }}"
  delegate_to: "{{ groups['control'][0] }}"
  run_once: true
