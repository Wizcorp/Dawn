##########################
# PRIMARY INFRASTRUCTURE #
##########################

### Consul
# Consul is installed on all the nodes and is a cornerstone of this infra and is
# used to advertise every services in the cluster.
#
# Most components will use consul as a configuration source (both services and
# the kv store) when possible/supported, see prometheus as an exemple of service
# using consul for configuration.
#
# Consul is installed on every node, but only control nodes gets the consul UI.
###
- hosts: consul
  become: true
  roles:
    - consul

### Vault
# Vault is the key component of our security framework, it is tasked with delivering
# TLS certificates for both servers and clients
###
- hosts: control
  become: true
  roles:
    - vault

### LDAP
# Used a single source a truth for credentials in Dawn
###
# - hosts: control[0]
#   become: true
#   environment:
#     VAULT_ADDR: "http://127.0.0.1:8200"
#   roles:
#     - vault-auth
#     - role: vault-setup-ca
#       backend_name: ldap
#       server_ttl: "{{ ldap_server_max_ttl }}"
#       client_ttl: "{{ ldap_server_max_ttl }}"
#       vault_addr: "http://127.0.0.1:8200"
#     - openldap

### Fluentd
# Fluentd is installed on all the nodes and is used to collect logs from local
# containers and services, those logs are then forwarded to a configurable
# target which is by default elasticsearch on the monitoring nodes.
###
- hosts: all
  become: true
  roles:
    - role: williamyeh.fluentd
      tdagent_conf_template: "../files/monitoring/td-agent.conf"
      tdagent_plugins:
        - fluent-plugin-elasticsearch
  tasks:
    - name: "Transform syslog messages to json"
      copy:
        dest: /etc/rsyslog.conf
        src: "{{ playbook_dir }}/../files/monitoring/rsyslog.conf"
      register: rsyslog_conf
    - name: "Restart rsyslog"
      service:
        name: "{{ item }}"
        state: restarted
      when: rsyslog_conf.changed
      with_items:
        - rsyslog
        - td-agent

### Docker
# Docker is installed on every node, default setup is to listen on both the
# docker socket (for running docker directly via SSH) but also via HTTP on the
# default port (2376). We also register the insecure registry that will be
# started on the first control node. Finally we advertise the daemon consul
###
- hosts: docker
  become: true
  roles:
    - docker

### Telegraf
# Telegraf is our monitoring agent, by default it is set to monitor the local
# machine (cpu/memory/disk/etc...) as well as the local docker daemon, it is
# also advertised on consul so that prometheus can detect it and start polling
# from it as soon as it is available.
###
- hosts: all
  become: true
  roles:
    - role: dj-wasabi.telegraf
      telegraf_agent_version: 1.2.1
      telegraf_agent_version_sub_l: ""
      telegraf_agent_output:
        - type: prometheus_client
          config:
            - listen = "0.0.0.0:9126"
      telegraf_plugins_extra:
        - plugin: docker
          config:
            - endpoint = "unix:///var/run/docker.sock"
            - container_names = []
    - role: AerisCloud.consul-service
      consul_service_name: "telegraf"
      consul_service_port: 9126
      consul_service_tags:
        - monitor
  tasks:
    - name: Give the Telegraf user access to docker
      user:
        name: telegraf
        groups: docker
      tags:
        - telegraf

### HTTPS Setup
# Create a CA that emits self-signed HTTPS certificates for our load balancers
###
- hosts: control[0]
  become: true
  environment:
    VAULT_ADDR: "http://127.0.0.1:8200"
  roles:
    - vault-auth
    - role: vault-setup-ca
      backend_name: https
      server_ttl: "{{ https_server_max_ttl }}"
      vault_addr: "http://127.0.0.1:8200"

- hosts: all
  become: true
  tasks:
    - name: "Check TLS certificates status"
      stat:
        path: "{{ https_cert_file }}"
      register: https_certs_stat
    - name: "Generate server TLS certificates"
      when: >
        https_certs_stat.stat.exists|bool == False
        or cert_rotate_https_server|default(false)|bool
        or cert_rotate_https|default(false)|bool
        or cert_rotate_server|default(false)|bool
        or cert_rotate_all|default(false)|bool
      include_role:
        name: generate-tls
      vars:
        pki:
          # vault backend
          backend: https
          role: server
          # targets
          files:
            cert: "{{ https_cert_file }}"
            key: "{{ https_key_file }}"
            ca: "{{ https_ca_file }}"
          # TLS request data
          request_data:
            common_name: "*.{{ local_domain_name }}"
            ip_sans: "{{ private_ipv4 }}"

### LDAP
# Used a single source a truth for credentials in Dawn
###
- hosts: control[0]
  become: true
  environment:
    VAULT_ADDR: "http://127.0.0.1:8200"
  roles:
    - vault-auth
    - role: vault-setup-ca
      backend_name: ldap
      server_ttl: "{{ ldap_server_max_ttl }}"
      client_ttl: "{{ ldap_server_max_ttl }}"
      vault_addr: "http://127.0.0.1:8200"
    - openldap

### CA Certificates
# Make sure that every nodes have all intermediate CAs installed in their trust
# database, this allows us to have containers talk to vault/consul/etc...
# without complaining about self-signed stuff
###
- hosts: all
  become: true
  roles:
    - vault-auth
    - role: register-ca
      backend: consul
    - role: register-ca
      backend: docker
    - role: register-ca
      backend: vault
    - role: register-ca
      backend: https
    - role: register-ca
      backend: ldap

### Docker registry
# The first control node has a registry running on it, it is used by the swarm
# when deploying custom built images accross the cluster
###
- hosts: control[0]
  become: true
  roles:
    - role: AerisCloud.docker-manage
      docker_containers:
        - name: docker_auth
          image: cesanta/docker_auth:1
          restart_policy: always
          links:
            - "openldap:ldap"
          published_ports:
            - "5001:5001"
          volumes:
            - "/opt/dawn/docker_auth.yml:/config/auth_config.yml:ro"
            - "/opt/dawn/ldap_password.txt:/tmp/ldap_password.txt:ro"
            # HTTPS Certs
            - "{{ https_ca_file }}:/etc/ssl/certs/https/ca.pem:ro"
            - "{{ https_cert_file }}:/etc/ssl/certs/https/cert.pem:ro"
            - "{{ https_key_file }}:/etc/ssl/certs/https/key.pem:ro"
            # Extra CAs from our architecture
            - "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:/etc/ssl/certs/ca-certificates.crt:ro"
          sync_templates:
            - src: "{{ playbook_dir }}/../files/docker_auth.yml.j2"
              dest: /opt/dawn/docker_auth.yml
              mode: 0644
            - src: "{{ playbook_dir }}/../files/ldap_password.txt.j2"
              dest: /opt/dawn/ldap_password.txt
              mode: 0644
        - name: registry
          image: registry:2
          restart_policy: always
          links:
            - "docker_auth:auth"
          published_ports:
            - "5000:5000"
          volumes:
            - "{{ https_cert_file }}:/etc/ssl/certs/https/cert.pem:ro"
            # Extra CAs from our architecture
            - "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem:/etc/ssl/certs/ca-certificates.crt:ro"
          env:
            REGISTRY_AUTH_TOKEN_REALM: "https://registry-auth.{{ local_domain_name }}/auth"
            REGISTRY_AUTH_TOKEN_SERVICE: "Docker Registry"
            REGISTRY_AUTH_TOKEN_ISSUER: "Dawn"
            REGISTRY_AUTH_TOKEN_ROOTCERTBUNDLE: "/etc/ssl/certs/https/cert.pem"
  tasks:
    - name: "Expose registry and docker_auth via traefik"
      consul_kv:
        host: "127.0.0.1"
        key: "{{ item.key }}"
        value: "{{ item.value }}"
      run_once: true
      with_items:
        # registry
        - key: "traefik/backends/registry/servers/registry/url"
          value: "http://{{ group_ipv4.control[0] }}:5000"
        - key: "traefik/backends/registry/servers/registry/weight"
          value: "1"
        - key: "traefik/frontends/registry/backend"
          value: "registry"
        - key: "traefik/frontends/registry/routes/registry/rule"
          value: "Host:registry.{{ local_domain_name }}"
        # registry-auth
        - key: "traefik/backends/registry-auth/servers/registry-auth/url"
          value: "https://{{ group_ipv4.control[0] }}:5001"
        - key: "traefik/backends/registry-auth/servers/registry-auth/weight"
          value: "1"
        - key: "traefik/frontends/registry-auth/backend"
          value: "registry-auth"
        - key: "traefik/frontends/registry-auth/routes/registry-auth/rule"
          value: "Host:registry-auth.{{ local_domain_name }}"
